
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>   
    <meta http-equiv="Pragma" content="no-cache"/>
    <meta http-equiv="Expires" content="-1"/>

<!--    <link rel="StyleSheet" href="bingMobileCommon.css" type="text/css" media="screen"/>-->

    <style type="text/css">        
        
        #header
        {
            position: fixed;
            left: 0px;
            top: 0px;
            min-width: 1200px;
            padding: 0;
            width: 100%;
            color: #000000;
            padding: 0px;
            font-family: "Segoe UI", "Segoe WP", Segoe, Sans-Serif, Arial;
            text-align:center;
            font-size: 180%
        }
        
        #body
        {
            min-width: 1200px;
            background-color: white;
            font-family: "Segoe UI", "Segoe WP", Segoe, Sans-Serif, Arial;
            color: black;
        }
        
        #inputSection
        {
            height: 350px;
            width: 400px;
            border: 3px solid white;
            margin: 0px 0px 0px 0px;
            position: fixed;
            left: 20px;
            top: 50px;
            background-color:#ffffff;
            color: #000000;
            padding: 0px;
            /* overflow: auto; */
            /*overflow-y: scroll;*/
            overflow-x: hidden;
        }
        
        #loggingSection
        {
            height: 410px;
            width: 400px;
            border: 3px solid white;
            margin: 0px 0px 0px 0px;
            position: fixed;
            left: 20px;
            top: 400px;
            background-color:#ffffff;
            color: #000000;
            padding: 0px;
            overflow: auto;
            /*overflow-y: scroll;*/
        }
        
        #TGMap
        {
            margin: 0px 0px 0px 0px;
            position: fixed;
            left: 420px;
            top: 30px;
            padding: 0px;
            border: 3px solid purple;
            width: 1000px;  /* laptop make 800 or even less for projector TODO: resizable map*/
            height: 800px;
            bottom: 0;
        }
         
        a
        {
            text-decoration: none;
            color: #999999;
            font-size: 18px;
        }
        
        a:hover
        {
            text-decoration: underline;
        }
        
        div.blankVerticalLoggingSpace
        {
            width: 350px;
            height: 20px;
        }
        
        div.directionsModes
        {
            width: 350px;
            height: 20px;
        }
        
        table.directionsModes 
        {
            float: right;
            border: 0px white;
        }
        
        #directionsModeDriving
        {
            width: 34px;
            height: 34px;
            border: 1px white;
            background-color:#0066FF;
            padding-right: 4px;
            vertical-align: middle;
            cursor: pointer;
            background: transparent url('Content/directions_mode_car_selected.png') center no-repeat; 
        }
        
        #directionsModeDriving:hover
        {
            background:transparent url('Content/directions_mode_car_hover.png') center no-repeat; 
        }
        
        #directionsModeTransit
        {
            width: 34px;
            height: 34px;
            border: 1px white;
            background-color:#0066FF;
            padding-right: 4px;
            vertical-align: middle;
            cursor: pointer;
            background: transparent url('Content/directions_mode_transit.png') center no-repeat; 
        }
        
        #directionsModeTransit:hover
        {
            background:transparent url('Content/directions_mode_transit_hover.png') center no-repeat; 
        }
        
        #directionsModeWalking
        {
            width: 34px;
            height: 34px;
            border: 1px white;
            background-color:#0066FF;
            padding-right: 4px;
            vertical-align: middle;
            cursor: pointer;
            background: transparent url('Content/directions_mode_walking.png') center no-repeat; 
        }
        
        #directionsModeWalking:hover
        {
            background:transparent url('Content/directions_mode_walking_hover.png') center no-repeat; 
        }
        
        div.configurationSet
        {
            width: 330px;
            margin-left: 10px;
            margin-right: 10px;
            height: 50px;
            vertical-align: middle;
        }
        
        input.configuration
        {
            color: #000000;
            font-size: 12px;
            padding: 6px;
            /*idth: 250px;*/
            vertical-align: middle;
        }
        
        div.wayPointSet
        {
            width: 330px;
            margin-left: 10px;
            margin-right: 10px;
            height: 50px;
            vertical-align: middle;
        }
        
        input.wayPoint
        {
            color: #000000;
            font-size: 12px;
            padding: 6px;
            width: 285px;
            vertical-align: middle;
        }
        
        input.searchInput
        {
            color: #000000;
            font-size: 12px;
            padding: 6px;
            width: 250px;
            vertical-align: middle;
        }
        
        span.wayPointNumbering
        {
            color: #000000;
            font-size: 24px;
            padding-right: 4px;
            vertical-align: middle;
        }
        
        #directionsButton
        {
            border: 1px black;
            width: 50px;
            background-color:#0066FF;
            font-size: 24px;
            color: white;
            text-align: center;
            padding-right: 4px;
            vertical-align: middle;
            cursor: pointer;
        }
        
        #EnRouteButton
        {
            border: 1px white;
            width: 150px;
            background-color:#0066FF;
            font-size: 24px;
            color: white;
            text-align: center;
            padding-right: 4px;
            vertical-align: middle;
            cursor: pointer;
        }
        
        #addWayPointButton
        {
            border: 1px white;
            width: 100px;
            background-color:#FFFFFF;
            font-size: 24px;
            color: black;
            text-align: center;
            padding-right: 4px;
            vertical-align: middle;
            cursor: pointer;
            float: right;
        }
        
        #directionsButton:hover
        {
            background-color:#1188FF;
        }
        
        #EnRouteButton:hover
        {
            background-color:#1188FF;
        }
        
        
        div.searchResultsNumber
        {
            color: #0000FF;
            font-size: 20px;
            padding: 3px;
            width: 26px;
            vertical-align:text-top; 
            text-align: left;
        }
        
        
        a.DealLink
        {
            text-decoration:none; 
            color: #FFFFFF;
            font-size: 12px;
            padding: 3px;
            width: 85px;
            text-align: left;
        }
        
        div.DealAnnotationColumn
        {
            color: #FFFFFF;
            font-size: 12px;
            padding: 3px;
            width: 80px;
            text-align: left;
            background-image: url(DealPic.png);
            background-repeat: no-repeat;
            background-position:left;
        }
        
        div.FastestAnnotationColumn
        {
            color: #FFFFFF;
            font-size: 12px;
            padding: 3px;
            width: 80px;
            text-align: right;
            background-image: url(FastestPic.png);
            background-repeat: no-repeat;
            background-position:left;
        }
        
        div.EmptyAnnotationColumn
        {
            color: #FFFFFF;
            font-size: 12px;
            padding: 3px;
            width: 80px;
            text-align: left;
        }
        
        .Link
        {
            font-family: "Segoe UI", "Segoe WP", Segoe, Sans-Serif, Arial;
            font-size: 16px;
            text-decoration:none; color: #0000FF
        }
        
        .c8
        {
            font-family: "Segoe UI", "Segoe WP", Segoe, Sans-Serif, Arial;
            font-size: 14px;
            color:#000000;
        }
        
        .c10
        {
            font-size: 14px;
            color:#568e1a;
        }
        .deal
        {
            font-family: "Segoe UI", "Segoe WP", Segoe, Sans-Serif, Arial;
            font-size: 14px;
            color:#FF0000;
        }
        
        .coupons
        {
            font-size: 14px;
            color:#DD8800;
        }
        
        .fastest
        {
            font-size: 14px;
            color:#00AA00;
        }
        
        div.detourTime
        {
            color: #000000;
            font-size: 12px;
            padding: 3px;
            width: 80px;
            font-family: "Segoe UI", "Segoe WP", Segoe, Sans-Serif, Arial;
            text-align: center;
        }
        
        .largeCheckbox
        {
            width:50px;
            height:50px;
        }

        
    </style>
  
    <script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script>    
    <script type="text/javascript" src="json2.js" ></script>  
    <script type="text/javascript">

        var map = null;
        var directionsManager = null;
        var xmlHttp = null;
        var wayPointsCounter = 2;
        //    var gazResponse = null;
        //    var editMeBox = null
        var minimumDistanceThreshold = 1; //miles
        var maximumDistanceThreshold = 6; //miles
        var suggestedNumberOfSegments = 10;
        //var distanceThreshold = 6; //miles
        var earthRadius = 3963.19059; //miles
        //var distanceThresholdAdjusted = (distanceThreshold * distanceThreshold) / (earthRadius * earthRadius);
        var degToRadiansConvFactor = Math.PI / 180;
        var totalRouteDistance = 0;
        var haveRequestedRoute = false;
        var directionsMode;

        function loadMapModule() {
            initializeMap(); 
        }

        function initializeMap() {
            do {
                mapContainer = document.getElementById('TGMap');  //TODO: replace with setTimeout()
            } while (mapContainer == null);

            // Initialize the map
            map = new Microsoft.Maps.Map(mapContainer,
            {
                credentials: 'AuhS28X7xWM6lPL4XSF1pZhCN-yQKSCfilxd72dBX7NesINrlYg2TEQrBfkVICOh',
                showMapTypeSelector: true,
                customizeOverlays: true,
                enableClickableLogo: true,
                enableSearchLogo: false,
                showDashboard: true,
                showScalebar: false,
                disableKeyboardInput: true,
                mapTypeId: Microsoft.Maps.MapTypeId.road,   //aerial
                center: new Microsoft.Maps.Location(47.6149, -122.340097),
                zoom: 15
            });

            Microsoft.Maps.loadModule('Microsoft.Maps.Directions', { callback: directionsModuleLoaded });
        }

        function directionsModuleLoaded() {
            directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);
            directionsMode = Microsoft.Maps.Directions.RouteMode.driving;
        }

        //TODO: This json2.js should be minified before deployment.
        // See http://javascript.crockford.com/jsmin.html
        function getDirections() {

            haveRequestedRoute = true;
            removeSearchResultPushpins();

            // TODO: directionsManager.clearDisplay instead and manage a list of waypoints that is updates whenever the user edits the waypoint textboxes
            directionsManager.resetDirections();
            directionsManager.setRenderOptions({ itineraryContainer: document.getElementById('itineraryDiv') });
            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsError', displayError);
            Microsoft.Maps.Events.addHandler(directionsManager, 'directionsUpdated', updateTotalRouteDistance);

            var startWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: document.getElementById("wayPointInputA").value });
            var endWaypoint = new Microsoft.Maps.Directions.Waypoint({ address: document.getElementById("wayPointInputB").value });

            directionsManager.addWaypoint(startWaypoint);
            directionsManager.addWaypoint(endWaypoint);

            //transit, walking
            directionsManager.setRequestOptions({ routeMode: directionsMode });

            directionsManager.calculateDirections();

//            var searchData = new SearchData(document.getElementById("wayPointInputA").value,
//                                            document.getElementById("wayPointInputB").value,
//                                            document.getElementById("searchInputA").value,
//                                            0,
            //                                            3);

            //map.entities.clear();
            //latlon = map.getCenter();
            //var polyline = new Microsoft.Maps.Polyline([new Microsoft.Maps.Location(latlon.latitude - 0.1, latlon.longitude - 0.1), new Microsoft.Maps.Location(latlon.latitude + 0.1, latlon.longitude - 0.1), new Microsoft.Maps.Location(latlon.latitude + 0.1, latlon.longitude), new Microsoft.Maps.Location(latlon.latitude - 0.1, latlon.longitude), new Microsoft.Maps.Location(latlon.latitude - 0.1, latlon.longitude + 0.1), new Microsoft.Maps.Location(latlon.latitude + 0.1, latlon.longitude + 0.1)], null);
            //map.setView({ zoom: 8 });
            //map.entities.push(polyline);

            //var location = map.getCenter(); // new Microsoft.Maps.Location(latVal, longVal)
            //var polyline2 = AddCircle(location, 10);
            //map.entities.push(polyline2);
        }

        // 
        // http://social.msdn.microsoft.com/forums/en-US/vemapcontroldev/thread/a2c3d890-61ee-4dea-9c5e-abf0da273c71
        // Richard_Brundritt, Microsoft - slightly edited
        //radius in miles
        function AddCircle(location, radius) {
            var R = 3963.19059; // earth's mean radius in miles
            var lat = (location.latitude * Math.PI) / 180; //rad
            var lon = (location.longitude * Math.PI) / 180; //rad
            var d = parseFloat(radius) / R;  // d = angular distance covered on earth's surface
            var points = new Array();
            for (x = 0; x <= 360; x++) {
                var p2 = new Microsoft.Maps.Location(0, 0);
                brng = x * Math.PI / 180; //rad
                p2.latitude = Math.asin(Math.sin(lat) * Math.cos(d) + Math.cos(lat) * Math.sin(d) * Math.cos(brng));
                p2.longitude = ((lon + Math.atan2(Math.sin(brng) * Math.sin(d) * Math.cos(lat), Math.cos(d) - Math.sin(lat) * Math.sin(p2.latitude))) * 180) / Math.PI;
                p2.latitude = (p2.latitude * 180) / Math.PI;
                points.push(p2);
            }
            var poly = new Microsoft.Maps.Polyline(points);
            return poly;
        }


        function displayError(e) 
        {
            alert(e.message);
        }

        //in miles
        function updateTotalRouteDistance(e) {
            totalRouteDistance = 0;
            for (var i = 0; i < e.routeSummary.length; i++) {
                totalRouteDistance += e.routeSummary[i].distance;
            }
        }

         function displayMessage(e)
         {
            alert("The calculated route has " + e.route[0].routeLegs[0].itineraryItems.length + " direction steps."); 
         }

        function addDestination() {

            var ni = document.getElementById('DestinationsList');
            var newdiv = document.createElement('div');
            newdiv.setAttribute('class', 'wayPointSet');
            var letter = String.fromCharCode("A".charCodeAt(0) + (wayPointsCounter++));
            var divContent = '<span class=\'wayPointNumbering\'>' + letter + '</span> <input id=\'wayPointInput' + letter + '\' class=\'wayPoint\' value=\'\' />'
            newdiv.innerHTML = divContent;
            ni.appendChild(newdiv);
            document.getElementById('inputSection').scrollTop = 10000;   //some very large number to scroll to the very bottom.

        }

        function removeDestination(id) {
            // TODO
        }

        function handleEnRouteResponse(xmlHttp) {
            if (xmlHttp.readyState == 4) {

                //TODO: replace eval() with parse()?
                var response = eval("(" + xmlHttp.responseText + ")");

                var shortResults = response.ShortResults;
                for (var i = 0; i < shortResults.length; i++) {
                    var pushpinOptions = { typeName: 'result', icon: 'Content/micro_roadmap.png', width: 16, height: 16 };
                    var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(shortResults[i].Latitude, shortResults[i].Longitude), pushpinOptions);
                    map.entities.push(pushpin);
                }

                var resultsString = response.resultsString;
                var results = response.Results;
                for (var i = 0; i < results.length; i++) {
                    var offset = new Microsoft.Maps.Point(0, 5);
                    //var pushpinOptions = { icon: virtualPath + '/Content/poi_custom.png', text: '1', visible: true, textOffset: offset };
                    var pushpinOptions = { text: (i + 1).toString(), visible: true, textOffset: offset, typeName: 'result', icon: 'Content/poi_desktop_default.png', width: 28, height: 28 };
                    var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(results[i].Latitude, results[i].Longitude), pushpinOptions);
                    map.entities.push(pushpin);
                }

                displayResultsText(response);
            }
        }

        function getEnRouteResults() {

            var route = directionsManager.getRouteResult();   //Route[] -> route  //    RouteLeg[] Route.routeLegs Each leg has sublegs
            if (route == null && haveRequestedRoute == false) {
                haveRequestedRoute = true;
                getDirections();
            }
            if (route == null || totalRouteDistance==0) {
                setTimeout(getEnRouteResults, 5)
                return;
            }

            // Create HTTP request
            var xmlHttp;
            try {
                xmlHttp = new XMLHttpRequest();
            } catch (e) {
                try {
                    xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (e) {
                    try {
                        xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e) {
                        alert("This sample only works in browsers with AJAX support");
                        return false;
                    }
                }
            }

            xmlHttp.onreadystatechange = function () { handleEnRouteResponse(xmlHttp); }
            //var searchPointLatitudes = new Array();
            //var searchPointLongitudes = new Array();
            //calculateSearchPoints(route, searchPointLatitudes, searchPointLongitudes);

         //   var url = "EnRouteService.svc/";
            var url = "http://manosk-brv1-100/EnRoute/EnRouteService.svc/";
            
            var operation = "SearchEnRoute";
            url = url + operation + "?callback=?";

            var totalPoints = 0;
            //check if route[i].routelegs is null same for subLegs etc.
            // ----------------------------------------------------
            //TODO only handles 0th route.
            var routeInfos = new Array(1);  // var routeInfos = new Array(route.length);
            for (i = 0; i < route.length &&  i<=0; i++) {
                var routeLegs = new Array(route[i].routeLegs.length);
                for (j = 0; j < route[i].routeLegs.length; j++) {
                    var subLegs = new Array(route[i].routeLegs[j].subLegs.length);
                    for (k = 0; k < route[i].routeLegs[j].subLegs.length; k++) {
                        var routePath = new Locations(route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes, route[i].routeLegs[j].subLegs[k].routePath.decodedLongitudes);
                        subLegs[k] = new RouteSubLeg(routePath);

                        totalPoints += route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes.length;

                    }
                    var startWayPointLocation = null;
                    var endWayPointLocation = null;
                    if (route[i].routeLegs[j].startWaypointLocation != null) {
                        startWayPointLocation = new SingleLocation(route[i].routeLegs[j].startWaypointLocation.latitude, route[i].routeLegs[j].startWaypointLocation.longitude);
                    }
                    if (route[i].routeLegs[j].endWaypointLocation != null) {
                        endWayPointLocation = new SingleLocation(route[i].routeLegs[j].endWaypointLocation.latitude, route[i].routeLegs[j].endWaypointLocation.longitude);
                    }
                    routeLegs[j] = new RouteLeg(startWayPointLocation, endWayPointLocation, route[i].routeLegs[j].originalRouteIndex, subLegs, route[i].routeLegs[j].summary);
                }
                routeInfos[i] = new RouteInfo(routeLegs);
            }
            var routeData = new RouteData(routeInfos);
            // -----------------------------------------------------

           // alert(totalPoints);
            // drawPath(route);

            var mustCalculateAccurateDetours = document.getElementById('detourCalculationCheckbox').checked;

            var localDirectionsMode;
            //Driving=0, Transit=1, Walking=2, Euklidean=3}
            switch (directionsMode) {
                case Microsoft.Maps.Directions.RouteMode.driving: localDirectionsMode = 0; break;
                case Microsoft.Maps.Directions.RouteMode.transit: localDirectionsMode = 1; break;
                case Microsoft.Maps.Directions.RouteMode.walking: localDirectionsMode = 2; break;
                default: localRouteMode = 3; //should never happen
            }

            var searchData = new SearchData(document.getElementById("wayPointInputA").value,
                                            document.getElementById("wayPointInputB").value,
                                            document.getElementById("searchInputA").value,
                                            localDirectionsMode,
                                            3,
                                            mustCalculateAccurateDetours,
                                            routeData);
            var body = JSON.stringify(searchData, null);

            //alert(body.length);

            // Send the HTTP request
	    xmlHttp.open("POST", url, true);
            xmlHttp.setRequestHeader("Content-type", "application/json");
            xmlHttp.send(body);

            removeSearchResultPushpins();
       }


       /*
       //in miles
        function calculateRouteDistance() {

            if (route == null) return 0;

            var routeDistance = 0;
            for (var i = 0; i < route.length; i++) {
                for (var j = 0; j < route[i].routeLegs.length; j++) {
                    routeDistance += route[i].routeLegs[j].distance;
                }
            }
            return routeDistance;
        }*/

        function calculateDistanceThreshold() {

            var distanceThreshold = totalRouteDistance / suggestedNumberOfSegments;
            distanceThreshold = Math.min(Math.max(distanceThreshold, minimumDistanceThreshold), maximumDistanceThreshold);
            return distanceThreshold;
        }

       function calculateSearchPoints(route, searchPointLatitudes, searchPointLongitudes) {

           if (route == null) return;

           var distanceThreshold = calculateDistanceThreshold();
           var distanceThresholdAdjusted = (distanceThreshold * distanceThreshold) / (earthRadius * earthRadius);

           var legsCount = 0;
           var subLegsCount = 0;
           var pointsCount = 0;
           var searchPointsCount = 0;

           //TODO: check if no route
           searchPointLatitudes[0] = route[0].routeLegs[0].subLegs[0].routePath.decodedLatitudes[0];
           searchPointLongitudes[0] = route[0].routeLegs[0].subLegs[0].routePath.decodedLongitudes[0];
           searchPointsCount++;

           var previousLatitude = searchPointLatitudes[0];
           var previousLongitude = searchPointLongitudes[0];

           var i;var j;var k;var l;
           for (i = 0; i < route.length; i++) {
               legsCount += route[i].routeLegs.length;
               for (j = 0; j < route[i].routeLegs.length; j++) {
                   subLegsCount += route[i].routeLegs[j].subLegs.length;
                   for (k = 0; k < route[i].routeLegs[j].subLegs.length; k++) {
                       pointsCount += route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes.length;
                       var latitudes = route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes;
                       var longitudes = route[i].routeLegs[j].subLegs[k].routePath.decodedLongitudes;
                       for (l = 0; l < route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes.length; l++) {
                           if (testEuklideanDistanceApproxThreshold(previousLatitude, previousLongitude, latitudes[l], longitudes[l], distanceThresholdAdjusted) >= 1) {
                               searchPointLatitudes[searchPointsCount] = latitudes[l];
                               searchPointLongitudes[searchPointsCount] = longitudes[l];
                               searchPointsCount++;

                               previousLatitude = latitudes[l];
                               previousLongitude = longitudes[l];   

                           }
                       }
                   }
               }
           }

           var lastLatitude = route[i - 1].routeLegs[j - 1].subLegs[k - 1].routePath.decodedLatitudes[l - 1];
           var lastLongitude = route[i - 1].routeLegs[j - 1].subLegs[k - 1].routePath.decodedLongitudes[l - 1];
           if (previousLatitude != lastLatitude || previousLongitude != lastLongitude) {
               searchPointLatitudes[searchPointsCount] = lastLatitude;
               searchPointLongitudes[searchPointsCount] = lastLongitude;
               searchPointsCount++;
           }

            return;
       }

       function SearchData(w1, w2, kw, routeMode, sm, mustCalculateAccurateDetours, routeData) {
           this.w1 = w1;
           this.w2 = w2;
           this.kw = kw;
           this.routeMode = routeMode;
           this.sm = sm;
           this.mcad = mustCalculateAccurateDetours;
           this.routeData = routeData;
           //this.wp = new WaypointLocations(waypointLats, waypointLons);
       }

       function SearchLocations(lats, lons) {
           this.lats = lats;
           this.lons = lons;
       }

       function RouteData(routeInfos) {
           this.routeInfos = routeInfos;
       }

       function RouteInfo(routeLegs) {
           this.routeLegs = routeLegs;
       }

       function RouteLeg(startWaypointLocation, endWaypointLocation, originalRouteIndex, subLegs, summary) {
           this.startWaypointLocation = startWaypointLocation;
           this.endWaypointLocation = endWaypointLocation;
           this.originalRouteIndex = originalRouteIndex;
           this.subLegs = subLegs;
           this.summary = summary;
       }

       function RouteSubLeg(routePath) {
           this.routePath = routePath;
       }

       function SingleLocation(lat, lon) {
           this.lat = lat;
           this.lon = lon;
       }

       function Locations(lats, lons) {
           this.lats = lats;
           this.lons = lons;
       }

       function RouteSummary(distance, time, timeWithTraffic) {
           this.distance = distance;
           this.time = time;
           this.timeWithTraffic = timeWithTraffic;
       }

//       function WaypointLocations(lats, lons) {
//           this.lats = lats;
//           this.lons = lons;
//       }

       function drawLocations(latitudes, longitudes) {
           removeSearchResultPushpins();
           if (latitudes.length != longitudes.length) return;
           for (var i = 0; i < latitudes.length; i++) {
               var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(latitudes[i], longitudes[i]));
               map.entities.push(pushpin);
           }
       }

    function drawPath(route) {

        removeSearchResultPushpins();

        var legsCount = 0;
        var subLegsCount = 0;
        var pointsCount = 0;
        for (var i = 0; i < route.length; i++) {
            legsCount += route[i].routeLegs.length;
            for (var j = 0; j < route[i].routeLegs.length; j++) {
                subLegsCount += route[i].routeLegs[j].subLegs.length;
                for (var k = 0; k < route[i].routeLegs[j].subLegs.length; k++) {
                    pointsCount += route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes.length;
                    var latitudes = route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes;
                    var longitudes = route[i].routeLegs[j].subLegs[k].routePath.decodedLongitudes;
                    for (var l = 0; l < route[i].routeLegs[j].subLegs[k].routePath.decodedLatitudes.length; l++) {
                        var pushpin = new Microsoft.Maps.Pushpin(new Microsoft.Maps.Location(latitudes[l], longitudes[l]));
                        map.entities.push(pushpin);
                    }
                }
            }
        }

        alert("Routes: " + route.length + "Legs: "+ legsCount + "SubLegs: " + subLegsCount + "Points: " + pointsCount);
    }

    function removePushpinsDownTo(t) {
        for (var i = map.entities.getLength() - 1; i >= t; i--) {
            var pushpin = map.entities.get(i);
            if (pushpin instanceof Microsoft.Maps.Pushpin) {
                map.entities.removeAt(i);
            };
        }
    }

    function removeSearchResultPushpins() {
        for (var i = map.entities.getLength() - 1; i >= 0; i--) {
            var pushpin = map.entities.get(i);
            if (pushpin instanceof Microsoft.Maps.Pushpin
                && pushpin.getTypeName() != null
                && pushpin.getTypeName().localeCompare("result") == 0) {
                map.entities.removeAt(i);
            };
        }
    }

    function EuklideanDistance(latDeg1, lonDeg1, latDeg2, lonDeg2) {

        var lat1 = latDeg1 * degToRadiansConvFactor;
        var lon1 = lonDeg1 * degToRadiansConvFactor;
        var lat2 = latDeg2 * degToRadiansConvFactor;
        var lon2 = lonDeg2 * degToRadiansConvFactor;

        var x = (lon2 - lon1) * Math.cos((lat1 + lat2) / 2);
        var y = (lat2 - lat1);
        return Math.sqrt(x * x + y * y) * R;
    }

    // returns how many points need to be added
    // http://www.movable-type.co.uk/scripts/latlong.html
    // lat/lon in radians for equation
    // javascript cos takes also radians
    function testEuklideanDistanceApproxThreshold(latDeg1, lonDeg1, latDeg2, lonDeg2, distanceThresholdAdjusted) {

        var lat1 = latDeg1 * degToRadiansConvFactor;
        var lon1 = lonDeg1 * degToRadiansConvFactor;
        var lat2 = latDeg2 * degToRadiansConvFactor;
        var lon2 = lonDeg2 * degToRadiansConvFactor;

        var x = (lon2 - lon1); // leave out comp expensive * Math.cos((lat1 + lat2) / 2) for common case;
        var y = (lat2 - lat1);

        if (x * x + y * y > distanceThresholdAdjusted) {
            var xp = x * Math.cos((lat1 + lat2) / 2);
            var distanceSquaredAdjusted = xp * xp + y * y;
            if (distanceSquaredAdjusted > distanceThresholdAdjusted) {
                return 1;
                // TODO uncomment the following to return how many points need to be added
                //return Math.round(Math.sqrt(distanceSquaredAdjusted / distanceThresholdAdjusted));
            }
        }
        return 0;
    }

    // http: //www.codeproject.com/Articles/12375/JavaScript-StringBuilder
    // Initializes a new instance of the StringBuilder class
    function StringBuilder(value) {
        this.strings = new Array("");
        this.append(value);
    }

    StringBuilder.prototype.append = function (value) {
        if (value) {
            this.strings.push(value);
        }
    }

    StringBuilder.prototype.clear = function () {
        this.strings.length = 1;
    }

    StringBuilder.prototype.toString = function () {
        return this.strings.join("");
    }


    function displayResultsText(response) {

        if (response == null || response.Results == null) {
            return;
        }

        var ni = document.getElementById('loggingSection');

        var sb = new StringBuilder();
        // add table start
        sb.append("<table bgColor=FFFFFF border=0> <tbody>");

        var results = response.Results
        for (var i = 0; i < results.length; i++) {
            addResultToDisplay(results[i], i+1, sb)
        }

        sb.append("</tbody> </table>"); 
        ni.innerHTML = sb.toString();
        loggingSection.scrollTop = 0;   //some very large number to scroll to the very bottom.
    }

    function addResultToDisplay(result, index, sb) {

        sb.append("<tr><td><div class=\"searchResultsNumber\">" + index.toString() + "</div></td>");
        sb.append("<td><div class=\"s15\"><a class=\"Link\" href=\"" + result.Url + "\">" + result.Title + "</a><br/>");
        sb.append("<span class=\"c8\">" + result.Address + ", " + result.City + ", " + result.StateOrProvince + "</span><br />");
        sb.append("<span class=\"c10\">" + result.PhoneNumber + "</span>&nbsp;<br /></div></td>");

 //       sb.append("<td><div class=\"DealAnnotationColumn\"><a class=\"DealLink\" href=\"http://www.yourbestdeals.com/deal.aspx?r=8coupons&dealid=2898&locationid=74&sublocation=&d=ms18387023\"> Save 50% </a></div></td>");

        switch (index) {
           //  case 1:
           //     sb.append("<td><div class=\"FastestAnnotationColumn\"> Fastest &nbsp; &nbsp; &nbsp;</div>");
           //     break;
//            case 3:
//                sb.append("<td><div class=\"DealAnnotationColumn\"><a class=\"DealLink\" href=\"http://www.yourbestdeals.com/deal.aspx?r=8coupons&dealid=2898&locationid=74&sublocation=&d=ms18387023\"> Save 50% </a></div>");
//                break;
//            case 5:
//                sb.append("<td><div class=\"DealAnnotationColumn\"><a class=\"DealLink\" href=\"http://www.yourbestdeals.com/deal.aspx?r=8coupons&dealid=2898&locationid=74&sublocation=&d=ms18387023\"> Save 30% </a></div>");
//                break;
            default:
                sb.append("<td><div class=\"EmptyAnnotationColumn\"></div>");
        }

        //var detourTime = Math.round(8);

        // TODO FIX Science Fair Hack:
       // if (index == 1) {
       //     result.DetourTime = 1;
        // }

            var detourDistance = Math.round(result.DetourDistance);
            if (result.DetourTime >= 0) {
                var detourHours = Math.floor(result.DetourTime / 3600);
                var detourMinutes = Math.floor((result.DetourTime % 3600) / 60);
                if (detourHours > 0) {
                    sb.append("<div class=\"detourTime\"> " + result.DetourDistance.toFixed(1) + " mi <br/> " + detourHours + " hr " + detourMinutes + " min</div>");
                } else {
                    sb.append("<div class=\"detourTime\"> " + result.DetourDistance.toFixed(1) + " mi <br/> " + detourMinutes + " min</div>");
                }
            } else {
                //sb.append("<div class=\"detourTime\"> " + result.DetourDistance.toFixed(1) + " mi <br/></div>");
            }

        sb.append("</td></tr>");
    }

    function setDirectionsMode(directionsMode) {
        this.directionsMode = directionsMode;

        var div = document.getElementById('directionsModeDriving');
        if (directionsMode == Microsoft.Maps.Directions.RouteMode.driving) {
            div.style.background = 'transparent url("Content/directions_mode_car_selected.png") center no-repeat';
            document.getElementById('detourCalculationCheckbox').setAttribute('disabled', false);
            document.getElementById('configurationText').style.color = '#000000';
        } else {
            div.style.background = 'transparent url("Content/directions_mode_car.png") center no-repeat';
        }

        div = document.getElementById('directionsModeTransit');
        if (directionsMode == Microsoft.Maps.Directions.RouteMode.transit) {
            div.style.background = 'transparent url("Content/directions_mode_transit_selected.png") center no-repeat';
            document.getElementById('detourCalculationCheckbox').setAttribute('disabled', true);
            document.getElementById('configurationText').style.color = '#777777';
        } else {
            div.style.background = 'transparent url("Content/directions_mode_transit.png") center no-repeat';
        }

        div = document.getElementById('directionsModeWalking');
        if (directionsMode == Microsoft.Maps.Directions.RouteMode.walking) {
            div.style.background = 'transparent url("Content/directions_mode_walking_selected.png") center no-repeat';
            document.getElementById('detourCalculationCheckbox').setAttribute('disabled', false);
            document.getElementById('configurationText').style.color = '#000000';
        } else {
            div.style.background = 'transparent url("Content/directions_mode_walking.png") center no-repeat';
        }
    }


      </script>

    <title>En Route</title>
</head>

<body id='body' onload="loadMapModule();">

    <h1 id='header'> </h1>

    <div id='inputSection'>
   
       <div class='directionsModes'>
           <table class='directionsModes'>
                <tbody>
                    <tr>
                        <td> <div id='directionsModeDriving' onclick="setDirectionsMode(Microsoft.Maps.Directions.RouteMode.driving)"></div> </td>
                        <td> <div id='directionsModeTransit' onclick="setDirectionsMode(Microsoft.Maps.Directions.RouteMode.transit)"></div> </td>
                        <td> <div id='directionsModeWalking' onclick="setDirectionsMode(Microsoft.Maps.Directions.RouteMode.walking)"></div> </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class='blankVerticalLoggingSpace'></div>
        <div id='DestinationsList'>
            <div class='wayPointSet'> 
                <span class='wayPointNumbering'> A </span> 
                <input id="wayPointInputA" class="wayPoint" value='Mill Creek, WA' /> 
            </div>
            <div class='wayPointSet'> 
                <span class='wayPointNumbering'> B </span> 
                <input id='wayPointInputB' class='wayPoint' value='Covington, WA' />
            </div>
        </div>
<!--        <div id='addWayPointButton' onclick="addDestination()">+</div>
            uncomment out also /*overflow-y: scroll;*/
-->

        <center><div id='directionsButton' onclick="getDirections()">Go!</div></center>

        <br/><br/>
        <div class='wayPointSet'> 
            <span class='wayPointNumbering'> Find: </span> 
            <input id='searchInputA' class='searchInput' value='Quiznos' />
        </div>
        <center><div id='EnRouteButton' onclick="getEnRouteResults()">En Route</div></center>

        <br/>
        <div class='configurationSet'> 
            <span id='configurationText'  class='configuration'> Accurate detour calculation? </span> 
            <input type='checkbox' id='detourCalculationCheckbox' name='dcb'/>
        </div>
    </div>

    <div id='loggingSection'>

<!--    vertical-align:text-top; 
      -->

<!--      <table bgColor=FFFFFF border=0>
            <tbody>
                <tr>
                    <td> <div class="searchResultsNumber"> 15 </div> </td> 
                    <td>
                        <div class="s15">
                            <a class="Link" href="http://www.mp3raid.com/"> Free bla bla bla</a>   <span class="deal"></span>    <br/>
                            <span class="c8">Free music donwlownad bala aofffffffffffff  asfd fasdfa  fsdf  fdsaf fasdfffffffffffffffffasfdafasdfas</span><br />
                            <span class="c10"> http://www.mp3raid.com/ </span>&nbsp;<br />
                        </div>
                    </td>
                    <td>
                        <div class="DealAnnotationColumn"> 
                            <a class="DealLink" href="http://www.yourbestdeals.com/deal.aspx?r=8coupons&dealid=2898&locationid=74&sublocation=&d=ms18387023"> Save 50% </a>
                        </div>
                        <div class="detourTime"> +8 min</div>
                    </td>
                </tr>

                <tr>
                    <td> <div class="searchResultsNumber"> 15 </div> </td> 
                    <td>
                        <div class="s15">
                            <a class="Link" href="http://www.mp3raid.com/"> Free bla bla bla</a>   <span class="fastest"> Fastest &nbsp; &nbsp;</span>    <br/>
                            <span class="c8">Free music donwlownad bala aoffffffffffffffff fsdaf asdfa asdfa s asd ffffffffff fsadf sdfgs f sgfsdfff asfd afasdfas</span><br />
                            <span class="c10"> http://www.mp3raid.com/ </span>&nbsp;<br />
                        </div>
                    </td>
                    <td>
                        <div class="FastestAnnotationColumn"> Fastest &nbsp; &nbsp; &nbsp;</div>
                        <div class="detourTime"> +8 min</div>
                    </td>
                </tr>

                <tr>
                    <td> <div class="searchResultsNumber"> 15 </div> </td> 
                    <td>
                        <div class="s15">
                            <a class="Link" href="http://www.mp3raid.com/"> Free bla bla bla</a>   <span class="coupons">&nbsp; - &nbsp; Coupons</span>    <br/>
                            <span class="c8">Free music donwlownad bala aoffffffffffffffffffffffffff dsfasd saddfa  dasfa  sdafa fffasfdafasdfas</span><br />
                            <span class="c10"> http://www.mp3raid.com/ </span>&nbsp;<br />
                        </div>
                    </td>
                    <td>
                        <div class="EmptyAnnotationColumn"></div>
                        <div class="detourTime"> +8 min</div>
                    </td>
                </tr>

            </tbody>
        </table> -->

    </div>

    <div id='TGMap'></div>
    

</body>

</html>
